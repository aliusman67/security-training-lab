import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Switch } from '@headlessui/react';
import { ShieldExclamationIcon, ShieldCheckIcon } from '@heroicons/react/24/outline';

import BrokenAccessControl from '../components/labs/BrokenAccessControl';
import CryptographicFailures from '../components/labs/CryptographicFailures';
import InjectionLab from '../components/labs/InjectionLab';
import InsecureDesign from '../components/labs/InsecureDesign';
import SecurityMisconfig from '../components/labs/SecurityMisconfig';
import VulnerableComponents from '../components/labs/VulnerableComponents';
import AuthFailures from '../components/labs/AuthFailures';
import IntegrityFailures from '../components/labs/IntegrityFailures';
import LoggingFailures from '../components/labs/LoggingFailures';
import SSRFLab from '../components/labs/SSRFLab';

const labComponents = {
  'access-control': BrokenAccessControl,
  'crypto': CryptographicFailures,
  'injection': InjectionLab,
  'insecure-design': InsecureDesign,
  'misconfig': SecurityMisconfig,
  'outdated': VulnerableComponents,
  'auth': AuthFailures,
  'integrity': IntegrityFailures,
  'logging': LoggingFailures,
  'ssrf': SSRFLab
};

function VulnerabilityLab() {
  const { vulnerability } = useParams();
  const [isVulnerable, setIsVulnerable] = useState(true);
  
  const LabComponent = labComponents[vulnerability];

  if (!LabComponent) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold text-gray-900">
          Unknown vulnerability type: {vulnerability}
        </h2>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-7xl mx-auto"
    >
      <div className="bg-white shadow rounded-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-3xl font-bold text-gray-900">
            {vulnerability.split('-').map(word => 
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ')} Lab
          </h1>
          
          <div className="flex items-center">
            <span className="mr-3 text-sm font-medium text-gray-700">
              {isVulnerable ? 'Vulnerable' : 'Secure'} Mode
            </span>
            <Switch
              checked={isVulnerable}
              onChange={setIsVulnerable}
              className={`${
                isVulnerable ? 'bg-red-500' : 'bg-green-500'
              } relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary`}
            >
              <span className="sr-only">Toggle vulnerability mode</span>
              <span
                className={`${
                  isVulnerable ? 'translate-x-6' : 'translate-x-1'
                } inline-block h-4 w-4 transform rounded-full bg-white transition-transform`}
              />
            </Switch>
          </div>
        </div>

        <div className="mb-6">
          <div className={`p-4 rounded-lg ${isVulnerable ? 'bg-red-50' : 'bg-green-50'}`}>
            <div className="flex">
              {isVulnerable ? (
                <ShieldExclamationIcon className="h-5 w-5 text-red-400" />
              ) : (
                <ShieldCheckIcon className="h-5 w-5 text-green-400" />
              )}
              <div className="ml-3">
                <h3 className={`text-sm font-medium ${isVulnerable ? 'text-red-800' : 'text-green-800'}`}>
                  {isVulnerable ? 'Vulnerable Mode Active' : 'Secure Mode Active'}
                </h3>
                <p className="mt-2 text-sm text-gray-700">
                  {isVulnerable 
                    ? 'Warning: This mode demonstrates security vulnerabilities. Use only in a controlled environment.'
                    : 'This mode implements security best practices and protections.'}
                </p>
              </div>
            </div>
          </div>
        </div>

        <LabComponent isVulnerable={isVulnerable} />
      </div>
    </motion.div>
  );
}

export default VulnerabilityLab;